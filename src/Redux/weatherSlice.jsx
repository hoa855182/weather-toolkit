import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import WeatherApi from '../apis/WeatherApi';
import types from '../const/types';
 
import CurrentPositon from '../apis/CurrentPosition';
import name from '../apis/name'
import { call, put, takeLatest } from 'redux-saga/effects';

const initialState = {
    weather: {},
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const getWeatherAsync= ()=> {
//     types: 'abc'
// }
export const getWeatherAsync = createAsyncThunk(
    'weather/getWeatherAsync',

    async (city = '') => {

        let lat = 0, lon = 0;


        if (city === '') {
            const currentPostion = await CurrentPositon();
            lat = currentPostion[0];
            lon = currentPostion[1];

        }
        else {
            const position = await name.GET_LATLON({ q: city })
            console.log(position)
            lat = position.lat
            lon = position.lon

        }
        const weather = await WeatherApi.GET({ lat: lat, lon: lon });
        const cityname = await name.GET({ lat, lon });
        await new Promise((resolve) => setTimeout(resolve, 2000));
        console.log(weather)
        return {...weather,cityName:cityname}
    }
);

export const weatherSlice = createSlice({
    name: 'weather',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        weatherReducer: (state = initialState, action) => {
            switch (action.type) {
                case types.GET_WEATHER:
                    return {
                        ...state,
                        weather: action.payload
                    }

                default:
                    return state;
            }
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getWeatherAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getWeatherAsync.fulfilled, (state = initialState, action) => {
            
                state.status = 'idle';
                state.weather = action.payload;
            })
            .addCase(getWeatherAsync.rejected, (state) => {
                state.status = 'error';
            })
    },
});



// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.weather.value)`
export const selectState = (state) => state.weather.status;
export const selectWeather = (state) => state.weather.weather;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// function* addTodoSaga(action) {
//     const data = yield call(addTodoAPI, action.payload);
//     yield put(addTodo(data));
// }

// export function* todoSaga() {
//     yield takeLatest(addTodoAsync, addTodoSaga);
// }

export default weatherSlice.reducer;

